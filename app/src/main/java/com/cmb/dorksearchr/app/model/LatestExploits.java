package com.cmb.dorksearchr.app.model;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.util.Log;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by cmb on 3/6/14.
 */
public class LatestExploits {

    protected static final String GOOGLE_PROXY_URL = "http://ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=10&callback=?&q=";
    protected static final String EXPLOITDB_FEED = "http://www.exploit-db.com/rss.xml";
    protected static final String PACKETSTORM_FEED = "http://rss.packetstormsecurity.com/news/";
    protected static final String PACKETSTORM_FILES_FEED = "http://rss.packetstormsecurity.com/files";
    private String jsonString;
    private JSONArray jsonArray;
    private JSONObject jsonObject;

    public LatestExploits(int choice) {
        String url = "";
        try {
            switch (choice) {
                case 1:
                    url = GOOGLE_PROXY_URL + EXPLOITDB_FEED;
                    break;
                case 2:
                    url = GOOGLE_PROXY_URL + URLEncoder.encode(PACKETSTORM_FEED, "utf-8");
                    break;
                case 3:
                    url = GOOGLE_PROXY_URL + URLEncoder.encode(PACKETSTORM_FILES_FEED, "utf-8");
                    break;
                default:
                    break;
            }
        }
        catch (Exception e) {
            Log.e("LatestExploits", e.getLocalizedMessage());
        }

        new HttpAsyncTask().execute(url);
    }

    public static String GET(String url) {
        InputStream inputStream = null;
        String result = "";

        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpResponse httpResponse = httpClient.execute(new HttpGet(url));
            inputStream = httpResponse.getEntity().getContent();

            if(inputStream != null) {
                result = convertInputStreamToString(inputStream);
            }
            else
            {
                result = "There was a problem with the request!";
            }
        }
        catch(Exception e) {
            Log.e("LatestExploits", e.getMessage());
        }

        return result;
    }

    public static String convertInputStreamToString(InputStream inputStream) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
        String line = "";
        String res = "";
        try {
            while ((line = reader.readLine()) != null) res += line;
        }
        catch (Exception e) {
            Log.e("LatestExploits.convertInputStreamToString", e.getLocalizedMessage());
        }

        try {
            inputStream.close();
        } catch (IOException e) {
            Log.d("LatestExploits.convertInputStreamToString", "Could not close inputStream " + e.getLocalizedMessage());
        }
        return res;
    }

    public String getJsonString() {
        return jsonString;
    }

    public void setJsonString(String jsonString) {
        this.jsonString = jsonString;
    }

    public JSONArray getJsonArray() {
        return jsonArray;
    }

    public void setJsonArray(JSONArray jsonArray) {
        this.jsonArray = jsonArray;
    }

    public JSONObject getJsonObject() {
        return jsonObject;
    }

    public void setJsonObject(JSONObject jsonObject) {
        this.jsonObject = jsonObject;
    }

    public List<Feeds> getJsonList() {
        List<Feeds> list = Feeds.fromJson(getJsonArray());
        return list;
    }

    private class HttpAsyncTask extends AsyncTask<String, Void, String> {
        String res = "";
        @Override
        protected String doInBackground(String... urls) {
            res = GET(urls[0]);
            return res;
        }

        @Override
        protected void onPostExecute(String result) {
            Log.d("HttpAsyncTask", "onPostExecute called");
            setJsonString(result);
            try {
                setJsonObject(new JSONObject(getJsonString()));
                setJsonArray(getJsonObject().getJSONArray("feed"));
            }
            catch(JSONException je) {
                Log.e("HttpAsyncTask", je.getLocalizedMessage());
            }
        }
    }

    public boolean isConnected(Context ctx) {
        ConnectivityManager connectivityManager = (ConnectivityManager)ctx.getSystemService(ctx.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
        if (networkInfo != null && networkInfo.isConnected()) {
            return true;
        }
        else {
            return false;
        }
    }
}
